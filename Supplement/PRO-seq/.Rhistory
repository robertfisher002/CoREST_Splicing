# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read_csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
library(dplyr)
#install.packages("data.table")
#install.packages("reshape2")
#install.packages("ggplot2")
library(data.table)
library(reshape2)
library(ggplot2)
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
library(dplyr)
library(tidyverse)
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read_csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read.csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read.csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 6: Remove rows with sum of 0 in the second table
Corin_TSS <- Corin_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 7: Reshape the second table
Corin_TSS_avg <- Corin_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 8: Combine the reshaped data frames
combined_data <- bind_rows(
mutate(DMSO_TSS_avg, Treatment = "DMSO"),
mutate(Corin_TSS_avg, Treatment = "Corin")
)
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
library(ggpubr)
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
TSS_plot + theme_bw()+ theme(panel.grid = element_blank()) + xlim(-500,2250) + ylim(0,2)+ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
View(combined_data)
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read.csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 6: Remove rows with sum of 0 in the second table
Corin_TSS <- Corin_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 7: Reshape the second table
Corin_TSS_avg <- Corin_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 8: Combine the reshaped data frames
combined_data <- bind_rows(
mutate(DMSO_TSS_avg, Treatment = "DMSO"),
mutate(Corin_TSS_avg, Treatment = "Corin")
)
View(DMSO_TSS_avg)
head(combined_data)
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read.csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 6: Remove rows with sum of 0 in the second table
Corin_TSS <- Corin_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 7: Reshape the second table
Corin_TSS_avg <- Corin_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 8: Combine the reshaped data frames
combined_data <- bind_rows(
mutate(DMSO_TSS_avg, Treatment = "DMSO"),
mutate(Corin_TSS_avg, Treatment = "Corin")
)
combined_data$Location <- sub("^X\\.", "", combined_data$Location)
View(combined_data)
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read.csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 6: Remove rows with sum of 0 in the second table
Corin_TSS <- Corin_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 7: Reshape the second table
Corin_TSS_avg <- Corin_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 8: Combine the reshaped data frames
combined_data <- bind_rows(
mutate(DMSO_TSS_avg, Treatment = "DMSO"),
mutate(Corin_TSS_avg, Treatment = "Corin")
)
combined_data$Location <- sub("^X\\.", "", combined_data$Location)
combined_data$Location <- sub("^X", "", combined_data$Location)
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot
TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = Location, y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot
head(combined_data)
# Create the plot
ggplot(combined_data, aes(x = Location, y = MeanCount, color = Treatment, group = Treatment)) +
geom_line() +
geom_point() +
labs(title = "Mean Count by Location for DMSO and Corin",
x = "Location",
y = "Mean Count") +
theme_minimal()
# Step 9: Plot the lines on the same graph
# Assuming combined_data is your dataframe
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)),
y = MeanCount,
color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"),
breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Distance Relative to TSS (nt)",
y = "PRO-seq Reads per TSS",
color = "Treatment") +
theme_bw() +
theme(panel.grid = element_blank()) +
xlim(-500, 2250)
# Display the plot
TSS_plot
# Step 9: Plot the lines on the same graph
# Assuming combined_data is your dataframe
# Assuming combined_data is your dataframe
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)),
y = MeanCount,
color = Treatment)) +
geom_smooth(method = "loess", se = FALSE, size = 0.5) +  # Using LOESS smoothing
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"),
breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Distance Relative to TSS (nt)",
y = "PRO-seq Reads per TSS",
color = "Treatment") +
theme_bw() +
theme(panel.grid = element_blank()) +
xlim(-500, 2250)
# Display the plot
TSS_plot
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read.csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
View(DMSO_TSS_avg)
View(DMSO_TSS)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(tidyverse)
library(readr)
library(data.table)
library(reshape2)
library(ggplot2)
# Step 2: Read the first table into a data frame
setwd("/Users/rjfisher/Library/Mobile Documents/com~apple~CloudDocs/BUSM/Alani Lab/DATA/CoREST Splicing/PRO-seq Analysis")
DMSO_TSS <- read_csv("make_heatmaps/DMSO_TSS.csv")  # Replace "DMSO_TSS.csv" with the actual file path of the first table
# Step 3: Remove rows with sum of 0 in the first table
DMSO_TSS <- DMSO_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 4: Reshape the first table
DMSO_TSS_avg <- DMSO_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 5: Read the second table into a data frame
Corin_TSS <- read_csv("make_heatmaps/Corin_TSS.csv")  # Replace "Corin_TSS.csv" with the actual file path of the second table
# Step 6: Remove rows with sum of 0 in the second table
Corin_TSS <- Corin_TSS %>%
filter(rowSums(select(., -Gene)) != 0)
# Step 7: Reshape the second table
Corin_TSS_avg <- Corin_TSS %>%
gather(key = "Location", value = "Count", -Gene) %>%
group_by(Location) %>%
summarise(MeanCount = mean(Count))
# Step 8: Combine the reshaped data frames
combined_data <- bind_rows(
mutate(DMSO_TSS_avg, Treatment = "DMSO"),
mutate(Corin_TSS_avg, Treatment = "Corin")
)
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
TSS_plot + theme_bw()+ theme(panel.grid = element_blank()) + xlim(-500,2250) + ylim(0,2)+ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
# Step 9: Plot the lines on the same graph
library(ggplot2)
TSS_plot <- ggplot(combined_data, aes(x = as.numeric(gsub("Location_", "", Location)), y = MeanCount, color = Treatment)) +
geom_line(size = 0.5) +
scale_color_manual(values = c("DMSO" = "#b2b2b2", "Corin" = "dodgerblue3"), breaks = c("DMSO", "Corin")) +  # Change the legend order and colors
labs(x = "Bin Location", y = "Mean Count", color = "Treatment")
TSS_plot <- TSS_plot + theme_bw() + theme(panel.grid = element_blank())+ xlim(-500,2250) +ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
TSS_plot
TSS_plot + theme_bw()+ theme(panel.grid = element_blank()) + xlim(-500,2250) + ylim(0,2)+ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
zoomTSSplot <- TSS_plot + theme_bw()+ theme(panel.grid = element_blank()) + xlim(-500,2250) + ylim(0,2)+ylab("PRO-seq Reads per TSS") +xlab("Distance Relative to TSS (nt)")
zoomTSSplot
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 5)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 5, height = 5)
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 4)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 5, height = 4)
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 4)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 5, height = 4)
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 3)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 5, height = 3)
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 3)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 4, height = 3)
ggsave("TSS_plot.pdf", TSS_plot, width = 5, height = 3)
ggsave("zoomTSSplot.pdf", zoomTSSplot, width = 4, height = 2)
